{
	"name": "jsonProcessingDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "jsonds",
						"type": "DatasetReference"
					},
					"name": "datasource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dataflowAzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flattendata"
				},
				{
					"name": "flattenvendor"
				},
				{
					"name": "flattenupdatewhitelist"
				}
			],
			"scriptLines": [
				"source(output(",
				"          data as (id as integer, jobCode as integer, jobTitle as string, jobUrl as string, role as string, location as string, maxYrsOfExperience as string, minYrsOfExperience as string, skillSet as string, skillsToEvaluate as string, desiredSkill as string, designation as string, positionsReq as string, minJobSalary as string, maxJobSalary as string, qualification as string, companyId as integer, createdDate as string, modifiedDate as string, deptFullCode as string, startDate as string, endtDate as string, status as integer, privateJobShare as string, jobVisibiltyLevel as string, employeeJobDistribution as string, vendorJobDistribution as (id as integer, jobId as integer, userId as integer, vendorId as integer, vendor as (id as integer, partnerName as string, userId as integer, companyId as integer, isActive as integer, added_date as string, lastLoggedIn as string, reason as string, vendorStatus as integer, sourceValidityConfigurationId as string, creditConfig as string, startDate as string, endDate as string, user as (id as integer, uuid as string, username as string, emailId as string, employeeId as string, phoneNo as string, linkedInProfile as string, modifiedByUserId as integer, status as integer, issuperuser as integer, companyId as integer, isInterviewCredentialSent as string, subscribeToEmail as string, logoutTime as string, roleId as integer, userDuplicateId as integer, departmentalRoles as string, competency as string, passwordReuseCount as integer, isCandidateCredentialSent as boolean), email as string, isApproved as integer), profileValidity as string, validityInDays as integer, notified as boolean, vendorAssignDate as string, groupId as string, vendorName as string)[], distributedChannels as string[], enabledForCareerSite as boolean)[],",
				"          totalCount as integer,",
				"          currentPage as integer,",
				"          pageSize as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> datasource",
				"datasource foldDown(unroll(data),",
				"     mapColumn(",
				"          parent_companyId = data.companyId,",
				"          designation = data.designation,",
				"          desiredSkill = data.desiredSkill,",
				"          employeeJobDistribution = data.employeeJobDistribution,",
				"          jobTitle = data.jobTitle,",
				"          jobUrl = data.jobUrl,",
				"          location = data.location,",
				"          jobId = data.endtDate,",
				"          vendorJobDistribution = data.vendorJobDistribution,",
				"          distributedChannels = data.distributedChannels",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattendata",
				"flattendata foldDown(unroll(vendorJobDistribution),",
				"     mapColumn(",
				"          jobId = vendorJobDistribution.jobId,",
				"          vendor_companyId = vendorJobDistribution.vendor.companyId,",
				"          partnerName = vendorJobDistribution.vendor.partnerName,",
				"          vendorName = vendorJobDistribution.vendorName,",
				"          designation,",
				"          desiredSkill,",
				"          location,",
				"          distributedChannels,",
				"          companyId = parent_companyId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenvendor",
				"flattenvendor foldDown(unroll(distributedChannels),",
				"     mapColumn(",
				"          companyId,",
				"          location,",
				"          desiredSkill,",
				"          designation,",
				"          vendorName,",
				"          partnerName,",
				"          vendor_companyId,",
				"          distributedChannels",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenupdatewhitelist",
				"flattenupdatewhitelist sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> sink1"
			]
		}
	}
}