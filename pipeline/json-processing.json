{
	"name": "json-processing",
	"properties": {
		"activities": [
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Lookup",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Set variable1",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "jsonData",
								"value": {
									"value": "@string(item())",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Copy data",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Set variable1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "DECLARE @json NVARCHAR(MAX);  \nSET @json = N'@{variables('jsondata')}';  \n  \nSELECT *\nFROM OPENJSON(@json, N'$.data') \nWITH ( \njobTitle NVARCHAR(MAX) N'$.jobTitle',\njobCode NVARCHAR(MAX) N'$.jobCode' ,\nlocation NVARCHAR(MAX) N'$.location',\nskillSet NVARCHAR(MAX) N'$.skillSet',\ncompanyId INT  N'$.companyId',\ndeptFullCode NVARCHAR(MAX) N'$.deptFullCode',\nvendorJobDistribution  NVARCHAR(MAX) N'$.vendorJobDistribution' as JSON,\ndistributedChannels NVARCHAR(MAX) N'$.distributedChannels' as JSON\n) \nOUTER APPLY OPENJSON(vendorJobDistribution) WITH \n(\njobId NVARCHAR(MAX) N'$.jobId',\nuserId NVARCHAR(MAX) N'$.userId',\nvendor_userId NVARCHAR(MAX) N'$.vendor.userId',\nuser_uuid NVARCHAR(MAX) N'$.vendor.user.uuid'\n)\nOUTER APPLY OPENJSON(distributedChannels) WITH \n(\nvalue nvarchar(max) '$'\n)\n;\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"tableOption": "autoCreate",
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "AzureSqldb",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "AzureSqldb",
									"type": "DatasetReference"
								}
							]
						}
					]
				}
			},
			{
				"name": "Lookup",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "json_ds",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			}
		],
		"variables": {
			"jsonData": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-05-02T12:50:41Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}